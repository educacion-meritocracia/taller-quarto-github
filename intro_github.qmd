---
pagetitle: "Introducción a Quarto y Github"
Author: Equipo EDUMER
bibliography: "input/bib/merit-factorial.bib"
csl: "input/bib/apa6.csl"
lang: es
knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    R.options:
      
      knitr.graphics.auto_pdf: true
format:
  revealjs:
    #logo: images/edumer.png
    slide-number: true
    theme: "libs/edumer.scss"
    auto-stretch: false
    title-slide-attributes:
      visibility: false
    transition: fade
    transition-speed: slow
# data-background-image: images/cover.jpg
# data-background-size: cover
    auto-play-media: true
    mathjax: "default"
  pdf:
    format: beamer 
    keep-tex: true  # Debug LaTeX output if needed
editor_options: 
  chunk_output_type: inline
---

```{r}
#| label: setup
#| include: false
library(knitr)
knitr::opts_chunk$set(echo = F,
                      warning = F,
                      error = F, 
                      message = F) 

options(kableExtra.html.bsTable = T)
options(knitr.kable.NA = "")
```

```{r}
#| label: packages
#| include: false

if (! require("pacman")) install.packages("pacman")

pacman::p_load(tidyverse,
               sjmisc, 
               here,
               lavaan,
               psych,
               corrplot,
               ggdist,
               patchwork,
               sjlabelled,
               semTools,
               gtools)


options(scipen=999)
rm(list = ls())
```

```{r}
#| label: data
#| include: false
#| echo: false

load(file = here("output", "data", "db_proc.RData"))

```

::: columns
::: {.column width="25%"}
![](images/edumer.png)

![](images/qrcode.png)
:::

::: {.column .column-right width="75%"}
# **Introducción a Quarto y Github**

------------------------------------------------------------------------

**Juan Carlos Castillo, Andreas Laffert & Kevin Carrasco**

::: {.red2 .medium}
**Departamento de Sociología, Universidad de Chile**

**Instituto de Sociología, Pontificia Universidad Católica de Chile**

**Centro de Estudios de Conflicto y Cohesión Social - COES**
:::

Taller interno

24 Enero 2025, Chile
:::
:::

::: notes
Aquí mis notas
:::

# Y..., ¿para qué me sirve este taller? {data-background-color="#5f5758"}

------------------------------------------------------------------------

::: {.incremental style="font-size: 120%;"}
Para llegar a [esto](https://educacion-meritocracia.github.io/taller-quarto-github/processing/documento_ejemplo.html)

![](images/ej.png)
:::

# ¿Cómo? {data-background-color="#5f5758"}

::: {style="font-size: 120%;"}
Vamos paso a paso
:::


# Repositorios y apertura {data-background-color="#5f5758"}

##  {data-background-color="black"}

::: {style="font-size: 200%;"}
La escritura en texto simple (como Markdown o Quarto) permite implementar un sistema de control de versiones, además de herramientas de respaldo, colaboración y comunicación
:::

## El origen: Abriendo un sistema operativo

::: columns
::: {.column width="50%"}
![](images/torvalds.png)
:::

::: {.column width="50%"}
-   Linus Torvalds, 1991 (21 años)

-   Crea sistema operativo libre (**Linux**) y lo abre a la colaboración. Postea:

    -   "I'm doing a (free) operating system (just a hobby, won't be big and professional..."

-   [TED talk](https://www.youtube.com/watch?v=o8NPllzkFhE&ab_channel=TED)
:::
:::

## Git

::: columns
::: {.column width="40%"}
![](images/git.png)
:::

::: {.column width="60%"}
-   es una especie de memoria o registro local que guarda información sobre:

    -   quién hizo un cambio
    -   cuándo lo hizo
    -   qué hizo

-   mantiene la información de todos los cambios en la historia de la carpeta / repositorio local

-   se puede sincronizar con un repositorio remoto (ej. Github)
:::
:::

## Git/github

::: columns
::: {.column width="40%"}
![](images/github.png)
:::

::: {.column width="60%"}
-   actualmente, Git / Github posee más de 100 millones de repositorios

-   mayor fuente de código en el mundo

-   ha transitado desde el mundo de desarrollo de software hacia distintos ámbitos de trabajo colaborativo y abierto

-   entorno de trabajo que favorece la ciencia abierta

-   El 4 de junio de 2018 Microsoft compró GitHub por la cantidad de 7500 millones de dólares. Al inicio, el cambio de propietario generó preocupaciones y la salida de algunos proyectos de este sitio; sin embargo, no fueron representativos. GitHub continúa siendo la plataforma más importante de colaboración para proyectos de código abierto.
:::
:::

##  {style="font-size: 150%;" data-background-color="#5f5758\""}

-   Git no es un registro de versiones de archivos específicos, sino de una carpeta completa

-   Guarda *"fotos"* de momentos específicos de la carpeta, y esta foto se *saca* mediante un [commit]{.red}

## 

![](images/gitflow.jpeg)

## Commits

-   El **commit** es el procedimiento fundamental del control de versiones

-   Git no registra cualquier cambio que se "guarda", sino los que se "comprometen" (commit).

-   En un **commit**

    -   se seleccionan los archivos cuyo cambio se desea registrar (*stage*)
    -   se registra lo que se está comprometiendo en el cambio (mensaje de commit)

## ¿Cuándo hacer un commit?

-   según conveniencia

-   sugerencias:

    -   que sea un momento que requiera registro (momento de foto)

    -   no para cambios menores

    -   no esperar muchos cambios distintos que puedan hacer perder el sentido del commit

## Algunos términos

| Término | Definición                                                                                                                                      |
|----|---------------|
| Remote  | Un repositorio almacenado en Github, no en el equipo                                                                                            |
| Clonar       | Para descargar una copia completa de los datos de un repositorio de Github.com, incluidas todas las versiones de cada archivo y carpeta.        |
| Branch       | Una versión paralela de los archivos contenidos en el repositorio, pero que no afecta a la rama principal.                                      |
| Fork         | Un nuevo repositorio que comparte la configuración de visibilidad y código con el repositorio "ascendente" original.                            |
| Upstream     | La branch de un repositorio original que se ha *forkeado* o clonado. La branch correspondiente de la branch clonada se denomina "descendiente". |
| Merge        | Para aplicar los cambios de una branch en otra.                                                                                                 |
| Pull request | Una solicitud para combinar los cambios de una branch en otra.                                                                                  |

## Branch

-   Una **branch** es una versión paralela de los archivos contenidos en el repositorio, pero que no afecta a la rama principal.

-   Permite el trabajo paralelo en distintos archivos.

![](images/branches.png)

## Conflicted branch

-   Cuando trabajamos en el mismo archivo -y los modificamos- podemos generar un **conflicto de versiones** de un archivo cuando otra persona quiera hacer modificaciones

![](images/conflicted-branch.png)

## ¿Cómo evitar los conflictos de versiones?

- Lo mejor es trabajar coordinadamente en tareas separadas (en momentos o archivos diferentes)

- Mediante *pull request*, donde una persona a cargo decide qué modificaciones aceptar y cuando.

# Gracias por su atención!

-   **Github del proyecto:** <https://github.com/educacion-meritocracia>

## Referencias
